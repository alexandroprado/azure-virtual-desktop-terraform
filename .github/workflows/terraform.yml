name: Terraform

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: 
    - main
  pull_request:
    branches:
    - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "terraform"
  terraform:
    name: 'Terraform'
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: production

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Checks that all Terraform configuration files adhere to a canonical format. If the fmt is bad, the job will fail
      - name: Terraform Format
        run: terraform fmt -check
        
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          terraform init
      
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          terraform plan -var-file=sample.tfvars -var="username=${{ secrets.AZ_VM_USERNAME }}" -var="password=${{ secrets.AZ_VM_PASSWORD }}" -out=main.tfplan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          terraform apply -auto-approve main.tfplan
          token=$(terraform output -raw registration_token)
          echo $token
          #echo "::set-output name=TF_REGISTRATION_TOKEN::${{ terraform output -raw registration_token }}"
        id: terraform-apply

      # On push to main, run the Ansible plabybook
      - name: Ansible Playbook
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo '${{ steps.terraform-apply.outputs.TF_REGISTRATION_TOKEN }}' > token
          echo '${{ secrets.ANSIBLE_VAULT_PASSWORD }}' > pass
          #ansible all -i inventory -e @secrets.yml --vault-password-file pass -m win_ping
          ansible-playbook -i inventory -e "registration_token=${{ steps.terraform-apply.outputs.TF_REGISTRATION_TOKEN }}" -e @secrets.yml --vault-password-file pass site.yml
        working-directory: ansible